#:kivy 1.11.1

#:set purple_background_color (0.196, 0.114, 0.612, 1)
#:set purple_separator_color (0.404, 0.227, 0.718, 1.0)
#:set yellow_color (1, 0.96, 0.49, 1.0)

<MenuScreen@Screen>
    # Set background color for main menu.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos
    # Main menu logo.
    BoxLayout:
        size_hint: (1, 0.2)
        pos_hint: {'top': 1, 'center_x': 0.5}
        orientation: "vertical"
        Label:
            text: "Gilbert"
            font_size: "20sp"
        Image:
            source: "assets/icons/icons8-magnet-80.png"
    # Box layout for menu buttons.
    BoxLayout:
        id: menu_screen_layout
        # Spacing between children, in pixels.
        spacing: 10
        # Padding between layout box and children.
        padding: 10
        orientation: "vertical"
        size_hint: (0.9, 0.8)
        pos_hint: {'top': 0.8, 'bottom': 0, 'center_x': 0.5}
        MenuScreenButton:
            text: "Study"
            icon: 'assets/icons/icons8-book-shelf-64-purple.png'
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'study_screen'
        MenuScreenButton:
            text: "Quiz"
            icon: "assets/icons/icons8-test-100-purple.png"
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'quiz_screen'
        MenuScreenButton:
            text: "Ohm simulator"
            icon: "assets/icons/icons8-renewable-energy-100-purple.png"
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'ohm_screen'
        MenuScreenButton:
            text: "Ohm calculator"
            icon: "assets/icons/calculator-2.png"
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'ohm_calc_screen'
        MenuScreenButton:
            text: "Kirchhoff's laws"
            icon: "assets/icons/circuit.png"
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'kirchhoff_screen'
        MenuScreenButton:
            text: "About"
            icon: "assets/icons/icons8-octocat-100-purple.png"
            on_press:
                # You can define the duration of the change
                # and the direction of the slide
                root.manager.transition.direction = 'left'
                root.manager.transition.duration = .3
                root.manager.previous = 'menu_screen'
                root.manager.current = 'about_screen'
        #SettingsButton

<QuestionLabel@Label>:
    # Make the text of the question wrap if it does not
    # fit the label rectangle.
    text_size: self.width, None
    size_hint: 0.5, 0.2
    height: self.texture_size[1]

<QuizScreen@Screen>:
    # Set background color for the quiz screen.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos

<AboutScreen@Screen>:
    BoxLayout:
        orientation: "vertical"
        RstDocument:
            source: "assets/chapters/about.rst"

<StudyScreen@Screen>
    # Set background color for the study screen.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos

<KirchhoffScreen@Screen>
    # Set background color for the Kirchhoff screen.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos

<OhmScreen@Screen>
    # Set background color for the Ohm simulator.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos

<OhmCalcScreen@Screen>
    # Set background color for the Ohm calculator.
    canvas.before:
        Color:
            #rgba: (0.2, 0.2, 0.4, 1)
            rgba: purple_background_color
        Rectangle:
            size: self.size
            pos: self.pos

<MenuScreenButton@Button>
    id: menu_screen_button
    # Make the button "invisible", since we are going to manipulate its canvas.
    background_color: (0, 0, 0, 0)
    background_normal: ""
    # Custom properties.
    # Purle color: in (0...255)=103, 57.8, 183
    #back_color: 0.404, 0.227, 0.718, 1.0
    back_color: 1, 1, 1, 1
    #back_color: 1, 0.96, 0.49, 1.0
    #back_color: 1, 0.98, 0.80, 1.0
    color: purple_background_color
    font_size: "25sp"
    border_radius: [18]
    icon: self.icon
    # Manipulate the canvas.
    canvas.before:
        Color:
            rgba: self.back_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.border_radius
    canvas:
        # Inside this rectangle, we will place the icon.
        Rectangle:
            # We want the icons to be squares, so we use the button's height for both X and Y.
            size: self.height * 0.5, self.height * 0.5
            #pos: self.pos[0] + (self.height * 0.5), self.pos[1] + (self.height / 4)
            pos: self.pos[0] + (self.height * 0.2), self.pos[1] + (self.height / 4)
            source: self.icon

<WhiteRoundedButton@Button>
    # This custom button is very similar to "MenuScreenButton"
    # but it does not have any icons
    id: white_rounded_button
    # Make the button "invisible", since we are going to manipulate its canvas.
    background_color: (0, 0, 0, 0)
    background_normal: ""
    # Make the text of the label wrap if it does not
    # fit the label rectangle.
    halign: "center"
    valign: "middle"
    text_size: self.width, None
    # Color of the text.
    color: purple_background_color
    font_size: "20sp"
    height: self.texture_size[1]
    # Custom properties.
    back_color: 1, 1, 1, 1.0
    border_radius: [18]
    icon: self.icon
    # Manipulate the canvas.
    canvas.before:
        Color:
            rgba: self.back_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.border_radius

<PurpleRoundedButton@Button>
    # This custom button is very similar to "MenuScreenButton"
    # but it does not have any icons
    id: purple_rounded_button
    # Make the button "invisible", since we are going to manipulate its canvas.
    background_color: (0, 0, 0, 0)
    background_normal: ""
    # Make the text of the label wrap if it does not
    # fit the label rectangle.
    halign: "center"
    valign: "middle"
    text_size: self.width, None
    height: self.texture_size[1]
    # Custom properties.
    back_color: 0.404, 0.227, 0.718, 1.0
    border_radius: [18]
    icon: self.icon
    # Manipulate the canvas.
    canvas.before:
        Color:
            rgba: self.back_color
        RoundedRectangle:
            size: self.size
            pos: self.pos
            radius: self.border_radius

<InstructionsButton@PurpleRoundedButton>
    # A custom button that explains usage.
    size: ("50sp", "50sp")
    size_hint: (None, None)
    # Add a "question mark" icon at the center.
    icon: "assets/icons/ic_live_help_white_48dp.png"
    canvas:
        # Inside this rectangle, we will place the icon.
        Rectangle:
            # We want the icons to be squares, so we use the button's height for both X and Y.
            size: self.height * 0.5, self.height * 0.5
            pos: (self.pos[0] + (self.height / 2) - ((self.height * 0.5) / 2)), (self.pos[1] + (self.height / 2) - ((self.height * 0.5) / 2))
            source: self.icon

<SettingsButton@PurpleRoundedButton>
    font_size: self.font_size
    on_release: app.open_settings()
    id: settings_button_boxlayout
    icon: "assets/icons/icons8-job-64.png"
    text: "Configuraci√≥n"

<ResetButton@PurpleRoundedButton>
    font_size: self.font_size
    text: "Reset"

<StudyInstructionsPopup@Popup>
    title: 'Instructions - Study section'
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.5, 0.5
    Label:
        text: "Select a lesson by touching the upper left button.\n\nYou will see the lesson's text on the right."
        # Make the text of the label wrap if it does not
        # fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<QuizInstructionsPopup@Popup>
    title: "Instructions - Quiz section"
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.5, 0.5
    Label:
        markup: True
        text: "Select the correct answer by pressing the corresponding button.\n\nCounters for incorrect and correct answers are shown on the right. The [b]reset[/b] button resets those counters."
        # Make the text of the label wrap if it does not
        # fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<OhmInstructionsPopup@Popup>
    title: 'Instructions - Ohm simulator'
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.5, 0.5
    Label:
        markup: True
        text: "Select [b]I[/b], [b]V[/b] or [b]R[/b] in the Ohm triangle in order to calculate the selected value.\n\nMove the two active sliders to see how the value is calculated.\n\n"
        # Make the text of the label wrap if it does not
        # fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<OhmCalcInstructionsPopup@Popup>
    title: 'Instructions - Ohm calculator'
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.6, 0.6
    Label:
        markup: True
        text: "1 - Select which value you want to calculate:\n([b]Volts[/b], [b]Amperes[/b] or [b]Ohms[/b]).\n\n2 - Enter the two remaining values in their respective input boxes.\n\n3 - Press the 'Calculate' button.\n\nThe result will be displayed in its input box."
        # Make the text of the label wrap if it does not fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<KirchhoffInstructionsPopup@Popup>
    title: 'Instructions - Kirchhoff simulator'
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.5, 0.5
    Label:
        markup: True
        text: "Select [b]Voltage[/b] or [b]Current[/b] at the top of the screen, enter the values in the active text boxes and click the [b]Calculate[/b] button."
        # Make the text of the label wrap if it does not fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<KirchhoffFormulasPopup@Popup>
    title: 'Formulas - Kirchhoff simulator'
    title_align: "center"
    separator_color: purple_separator_color
    auto_dismiss: True
    size_hint: 0.8, 0.8
    Label:
        markup: True
        text: "[b]Kirchhoff Current Law:[/b] The algebraic sum of currents in a network of conductors meeting at a point is zero.\n\n[b]Kirchhoff Voltage Law:[/b] The directed sum of the potential differences (voltages) around any closed loop is zero.\n\nI3 = I1 - 12\nV2 = V3\nI4 = I1\nV4 = Vt - V1 - V3"
        # Make the text of the label wrap if it does not fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<OhmMissingValuesPopup@Popup>
    title: 'Oops! One or more values are missing!'
    title_align: "center"
    separator_color: (1, 0, 0, 1)
    auto_dismiss: True
    size_hint: 0.5, 0.5
    Label:
        markup: True
        text: "In order to calculate a value, you must enter the other two values.\n\nFor example, if you want to calculate the Resistance, you must provide the values for Amperes and Volts."
        # Make the text of the label wrap if it does not fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<KirchhoffPopup@Popup>
    title: ''
    title_align: "center"
    separator_color: (1, 0, 0, 1)
    auto_dismiss: True
    size_hint: 0.5, 0.5
    # Custom properties:
    label_text: ""
    Label:
        markup: True
        text: root.label_text
        # Make the text of the label wrap if it does not fit the label rectangle.
        halign: "center"
        valign: "middle"
        text_size: self.width, None
        height: self.texture_size[1]

<ExampleVideoPopup@Popup>
    title: 'Example'
    title_align: "center"
    auto_dismiss: True
    size_hint: 0.5, 0.8
    # Custom properties:
    video_state: "play"
    file_source: ""
    VideoPlayer:
        source: root.file_source
        allow_fullscreen: False
        options: {"allow_stretch": False}
        state: root.video_state
